import os.path
from fusesoc import utils
import logging

from fusesoc.build.backend import Backend

logger = logging.getLogger(__name__)

class Quartus(Backend):

    MAKEFILE_TEMPLATE = """#Auto generated by FuseSoC
all: sta

include config.mk

project: $(DESIGN_NAME).tcl qsys
	quartus_sh $(QUARTUS_OPTIONS) -t $(DESIGN_NAME).tcl

map: project
	quartus_map $(QUARTUS_OPTIONS) $(DESIGN_NAME)

fit: map
	quartus_fit $(QUARTUS_OPTIONS) $(DESIGN_NAME)

asm: fit
	quartus_asm $(QUARTUS_OPTIONS) $(DESIGN_NAME)

sta: asm
	quartus_sta $(QUARTUS_OPTIONS) $(DESIGN_NAME)

clean:
	rm -rf *.* db incremental_db
"""

    CONFIG_MK_TEMPLATE = """#Auto generated by FuseSoC

DESIGN_NAME := {design_name}
QUARTUS_OPTIONS := {quartus_options}

qsys:"""

    QSYS_TEMPLATE = """
	ip-generate \
--project-directory={src_dir} \
--output-directory={dst_dir} \
--report-file=bsf:{dst_dir}/{name}.bsf \
--system-info=DEVICE_FAMILY={family} \
--system-info=DEVICE={device} \
--component-file={src_dir}/{name}.qsys
	ip-generate \
--project-directory={src_dir} \
--output-directory={dst_dir}/synthesis \
--file-set=QUARTUS_SYNTH \
--report-file=sopcinfo:{dst_dir}/{name}.sopcinfo \
--report-file=html:{dst_dir}/{name}.html \
--report-file=qip:{dst_dir}/{name}.qip \
--report-file=cmp:{dst_dir}/{name}.cmp \
--report-file=svd \
--system-info=DEVICE_FAMILY={family} \
--system-info=DEVICE={device} \
--component-file={src_dir}/{name}.qsys \
--language=VERILOG
"""

    def configure(self, args):
        super(Quartus, self).configure(args)

        with open(os.path.join(self.work_root, self.system.sanitized_name+'.tcl'), 'w') as tcl_file:
            tcl_file.write("project_new " + self.system.sanitized_name + " -overwrite\n")
            tcl_file.write("set_global_assignment -name FAMILY " + self.backend.family + '\n')
            tcl_file.write("set_global_assignment -name DEVICE " + self.backend.device + '\n')
            tcl_file.write("set_global_assignment -name TOP_LEVEL_ENTITY " + self.backend.top_module + '\n')

            for key, value in self.vlogparam.items():
                tcl_file.write("set_parameter -name {} {}\n".format(key, value))
            (src_files, incdirs) = self._get_fileset_files(['synth', 'quartus'])

            qsys_files = []
            for f in src_files:
                if f.file_type in ["verilogSource",
                                   "verilogSource-95",
                                   "verilogSource-2001",
                                   "verilogSource-2005"]:
                    _type = 'VERILOG_FILE'
                elif f.file_type in ["systemVerilogSource",
                                     "systemVerilogSource-3.0",
                                     "systemVerilogSource-3.1",
                                     "systemVerilogSource-3.1a"]:
                    _type = 'SYSTEMVERILOG_FILE'
                elif f.file_type in ['vhdlSource',
                                     'vhdlSource-87',
                                     'vhdlSource-93',
                                     'vhdlSource-2008']:
                    _type = 'VHDL_FILE'
                elif f.file_type in ['QIP']:
                    _type = 'QIP_FILE'
                elif f.file_type in ['QSYS']:
                    #Each qsys file will be run through ip-generate, which will
                    #generate a qip file with the same name as the qsys file
                    #The qip will will be stored in work_root/qsys/name/name.qip
                    #Therefore we replace the qsys_file with the qip file here
                    _src_dir = os.path.dirname(f.name)
                    _name = os.path.basename(f.name).split('.qsys')[0]
                    _dst_dir = os.path.join('qsys', _name)

                    qsys_files.append((_src_dir, _dst_dir, _name))

                    f.name = os.path.join(_dst_dir, _name+'.qip')
                    _type = 'QIP_FILE'
                elif f.file_type in ['SDC']:
                    _type = 'SDC_FILE'
                elif f.file_type in ['tclSource']:
                    tcl_file.write("source {}\n".format(f.name.replace('\\', '/')))
                    _type = None
                elif f.file_type in ['user']:
                    _type = None
                else:
                    _type = None
                    _s = "{} has unknown file type '{}'"
                    logger.warning(_s.format(f.name,
                                             f.file_type))
                if _type:
                    _s = "set_global_assignment -name {} {}\n"
                    tcl_file.write(_s.format(_type,
                                             f.name.replace('\\', '/')))

            for include_dir in incdirs:
                tcl_file.write("set_global_assignment -name SEARCH_PATH " + include_dir.replace('\\', '/') + '\n')

        with open(os.path.join(self.work_root, 'Makefile'), 'w') as makefile:
            makefile.write(self.MAKEFILE_TEMPLATE)

        with open(os.path.join(self.work_root, 'config.mk'), 'w') as config_mk:
            config_mk.write(self.CONFIG_MK_TEMPLATE.format(
                design_name     = self.system.sanitized_name,
                quartus_options = self.backend.quartus_options))
            for qsys_file in qsys_files:
                config_mk.write(self.QSYS_TEMPLATE.format(
                    src_dir = qsys_file[0],
                    dst_dir = qsys_file[1],
                    name    = qsys_file[2],
                    family  = self.backend.family,
                    device  = self.backend.device))

    def build(self, args):
        super(Quartus, self).build(args)

        utils.Launcher('make', cwd=self.work_root).run()

        super(Quartus, self).done()

    def pgm(self, remaining):
        args = ['--mode=jtag']
        args += remaining
        args += ['-o']
        args += ['p;' + self.system.sanitized_name + '.sof']
        utils.Launcher('quartus_pgm', args, cwd=self.work_root).run()
