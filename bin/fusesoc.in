#!/usr/bin/env @PYTHON@
import argparse
import os
import sys
import signal

#Check if this is run from a local installation
fusesocdir = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))
if os.path.exists(os.path.join(fusesocdir, "fusesoc")):
    sys.path[0:0] = [fusesocdir]
else:
    sys.path[0:0] = ['@pythondir@']

from fusesoc.build import BackendFactory
from fusesoc.config import Config
from fusesoc.coremanager import CoreManager, DependencyError
from fusesoc.simulator import SimulatorFactory
from fusesoc.simulator.verilator import Source
from fusesoc.system import System
from fusesoc.core import Core, OptionSectionMissing
from fusesoc.utils import pr_err, pr_info, pr_warn

import logging

logging.basicConfig(filename='fusesoc.log', filemode='w', level=logging.DEBUG)
logger = logging.getLogger(__name__)

def abort_handler(signal, frame):
        print('');
        pr_info('****************************')
        pr_info('****   FuseSoC aborted  ****')
        pr_info('****************************')
        print('');
        sys.exit(0)

signal.signal(signal.SIGINT, abort_handler)

def build(known, remaining):
    logger.debug('build() *Entered*')
    if known.system in CoreManager().get_systems():
        core = CoreManager().get_core(known.system)
        backend = BackendFactory(core.system)
        backend.configure()
        print('')
        backend.build()
        logging.debug('build() -Done-')
    else:
        pr_err("Can't find system '" + known.system + "'")

def pgm(known, remaining):
    logger.debug('pgm() *Entered*')
    if known.system in CoreManager().get_systems():
        core = CoreManager().get_core(known.system)
        backend = BackendFactory(core.system)
        backend.pgm(remaining)
        logging.debug('pgm() -Done-')
    else:
        pr_err("Can't find system '" + known.system + "'")

def fetch(known, remaining):
    logger.debug('fetch() *Entered*')
    core = CoreManager().get_core(known.core)
    if core:
        cores = CoreManager().get_depends(core.name)
        core.setup()
        for name in cores:
             pr_info("Fetching " + name)
             core = CoreManager().get_core(name)
             core.setup()
        logging.debug('fetch() -Done-')
    else:
        pr_err("Can't find core '" + known.core + "'")

def list_cores(known, remaining):
    cores = CoreManager().get_cores()
    print("\nAvailable cores:\n")
    if not cores:
        cores_root = CoreManager().get_cores_root()
        if cores_root:
            pr_err("No cores found in "+':'.join(cores_root))
        else:
            pr_err("cores_root is not defined")
        exit(1)
    maxlen = max(map(len,cores.keys()))
    print('Core'.ljust(maxlen) + '   Cache status')
    print("="*80)
    for name, core in cores.items():
        print(name.ljust(maxlen) + ' : ' + core.cache_status())
    logger.debug('list_cores() -Done-')

def core_info(known, remaining):
    logger.debug('core_info() *Entered*')
    core = CoreManager().get_core(known.core)
    if core:
        core.info()
    else:
        pr_err("Can't find core '" + known.core + "'")

def list_systems(known, remaining):
    logger.debug('list_systems() *Entered*')
    print("Available systems:")
    for system in CoreManager().get_systems():
        print(system)

def system_info(known, remaining):
    logger.debug('info() *Entered*')
    if known.system in CoreManager().get_systems():
        core = CoreManager().get_core(known.system)
        core.info()
        core.system.info()
    else:
        pr_err("Can't find system '" + known.system + "'")

def sim(known, remaining):
    logger.debug('sim() *Entered*')
    core = CoreManager().get_core(known.system)
    if core == None:
        pr_err("Can't find core '" + known.system + "'")
        exit(1)
    if known.sim:
        sim_name = known.sim[0]
    elif core.simulators:
        sim_name = core.simulators[0]
    else:
        pr_err("No simulator was found in '"+ known.system + "' core description")
        logger.error("No simulator was found in '"+ known.system + "' core description")
        exit(1)
    try:
        CoreManager().tool = sim_name
        sim = SimulatorFactory(sim_name, core)
    except DependencyError as e:
        pr_err("'" + known.system + "' or any of its dependencies requires '" + e.value + "', but this core was not found")
        exit(1)
    except OptionSectionMissing as e:
        pr_err("'" + known.system + "' miss a mandatory parameter for " + sim_name + " simulation (" + e.value + ")")
        exit(1)
    if known.force or not os.path.exists(sim.sim_root):
        try:
            sim.configure()
            print('')
        except RuntimeError as e:
            pr_err("Failed to configure the system")
            pr_err(str(e))
            exit(1)
        try:
            sim.build()
        except Source as e:
            pr_err("'" + e.value + "' source type is not valid. Choose 'C' or 'systemC'")
            exit(1)
        except RuntimeError as e:
            pr_err("Failed to build simulation model")
            pr_err(str(e))
            exit(1)
    if not known.build_only:
        try:
            sim.run(remaining)
        except RuntimeError as e:
            pr_err("Failed to run the simulation")
            pr_err(str(e))
    logger.debug('sim() -Done-')

def run(known, remaining):
    try:
        cm = CoreManager()
        config = Config()
        cm.add_cores_root(config.cores_root)
        cm.add_cores_root(config.systems_root)
        cm.add_cores_root(known.cores_root)
        cm.add_cores_root(known.systems_root)
    except RuntimeError as e:
        pr_err("Failed to register cores root")
        pr_err(str(e))
        exit(1)
    except IOError as e:
        pr_err("Failed to register cores root")
        pr_err(str(e))
        exit(1)
    known.func(known, remaining)

if __name__ == "__main__":
    logger.debug('__main__ *Entered*')
    logger.debug("Command line arguments: " + str(sys.argv))

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    parser.add_argument('--cores-root', help='Add additional directories containing cores', action='append')
    parser.add_argument('--systems-root', help='Add additional directories containing systems', action='append')
    #General options
    parser_build = subparsers.add_parser('build', help='Build an FPGA load module')
    parser_build.add_argument('system')
    parser_build.set_defaults(func=build)

    parser_pgm = subparsers.add_parser('pgm', help='Program a FPGA with a system configuration')
    parser_pgm.add_argument('system')
    parser_pgm.set_defaults(func=pgm)

    parser_fetch = subparsers.add_parser('fetch', help='Fetch a remote core and its dependencies to local cache')
    parser_fetch.add_argument('core')
    parser_fetch.set_defaults(func=fetch)

    parser_list_systems = subparsers.add_parser('list-systems', help='List available systems')
    parser_list_systems.set_defaults(func=list_systems)

    parser_system_info = subparsers.add_parser('system-info', help='Displays details about a system')
    parser_system_info.add_argument('system')
    parser_system_info.set_defaults(func=system_info)

    parser_list_cores = subparsers.add_parser('list-cores', help='List available cores')
    #parser_list_cores.
    parser_list_cores.set_defaults(func=list_cores)

    parser_core_info = subparsers.add_parser('core-info', help='Displays details about a core')
    parser_core_info.add_argument('core')
    parser_core_info.set_defaults(func=core_info)

    #Simulation subparser
    parser_sim = subparsers.add_parser('sim', help='Setup and run a simulation')
    parser_sim.add_argument('--sim', nargs=1, help='Override the simulator settings from the system file')
    parser_sim.add_argument('--build-only', action='store_true', help='Build the simulation binary without running the simulator')
    parser_sim.add_argument('--force', action='store_true', help='Force rebuilding simulation model when directory exists')
    parser_sim.add_argument('--dry-run', action='store_true')
    parser_sim.add_argument('system',help='Select a system to simulate') #, choices = Config().get_systems())
    parser_sim.set_defaults(func=sim)

    known, remaining = parser.parse_known_args()

    run(known, remaining)
    logger.debug('__main__ -Done-')
