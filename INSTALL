FuseSoC can be run directly from a downloaded tarball release or from a
checked out repository, or installed from the Python Package Index via pip.

Unless you want to do development on FuseSoC itself, it is better to do a system
installation. Follow these steps to do a system-wide installation.

Install from PyPI:

    sudo pip install fusesoc

Install from git checkout:

    sudo python setup.py install

Install using autotools:

    autoreconf -i
    ./configure && make
    make install

You most certainly want the default collection of cores to get started as well.
These are currently hosted at github.com/openrisc/orpsoc-cores. Download the
orpsoc-cores package and put the directories systems and cores somewhere on
your machine.

The next step is to create a directory that will host the build directories and
caches of downloaded cores. Create a file named fusesoc.conf in this directory
and add paths to the systems and cores directories like this:

[main]
cores_root=/path/to/cores
systems_root=/path/to/systems

The default is to use a directory called orpsoc-cores for systems and cores that
 is a sibling to your FuseSoC run directory. In that case your fusesoc.conf will
look like this:

[main]
cores_root   =../orpsoc-cores/cores
systems_root =../orpsoc-cores/systems

If fusesoc is in your path, you can now try to do a test simulation. Run
"fusesoc sim wb_bfm" to run through the self tests of the Wishbone BFM that is
provided by FuseSoC. This should download all the needed cores to a cache
directory, set up a build structure in the build directory and run a simulation
with Icarus Verilog.
