Core Description files
======================
:Author: Olof Kindgren
:Email: <olof@opencores.org>
:Date: 2013-06-04
:Revision: 1.0 (draft)

:Author: Jose T. de Sousa
:Email: <jts@inesc-id.pt>
:Date: 2014-01-28
:Revision: 1.1 (verilator rev)


capi (Core API) is the format for core description files. Current version is version 1.0. A capi 1.0 file is identified by the string "CAPI=1" in the beginning of a file. The rest of the file is a standard http://en.wikipedia.org/wiki/INI_file[INI file] that is compatible with Python's http://docs.python.org/2/library/configparser.html[configparser] module

File location
-------------

capi 1.0 files must reside in a sub directory of the cores directory and have the same name as the directory with a .core suffix, i.e. <cores_root>/<core_name>/<core_name>.core

.Locations of core description files
========
cores/or1200/or1200.core

cores/uart16550/uart16550.core
========

File contents
-------------

CAPI 1.0 files are divided into sections, with each section containing related configuration options. See http://en.wikipedia.org/wiki/INI_file[INI file] for more general information about ini files.

Only sections defined in this document are recognized by FuseSoC. All other sections are ignored. The same applies for the options inside each section. CAPI 1.0 defines the following required and optional sections and values. 

main
~~~~
The main section contain options that does not fit into any of the other
categories.

description (optional)
^^^^^^^^^^^^^^^^^^^^^^
A string with a description can be added to the core.

depend (optional)
^^^^^^^^^^^^^^^^^
List of cores that this core depends on.

simulators (optional)
^^^^^^^^^^^^^^^^^^^^^
A white-space separated list of FuseSoC-supported simulators that can be used to simulate the system. Currently supported simulators are:

* *modelsim :* Mentor Modelsim
* *icarus :* Icarus Verilog Open-Source simulator
* *verilator :* Verilog Open-Source compiler and simulator

Each of the simulator targets have a dedicated section described in further detail below.

modelsim (optional)
~~~~~~~~~~~~~~~~~~~
Additional options used when simulating with modelsim:

* *vlog_options :* Options to be sent as additional arguments to vlog
* *vsim_options :* Options to be sent as additional arguments to vsim

icarus (optional)
~~~~~~~~~~~~~~~~~
Additional options used when simulating with Icarus Verilog:

* *iverilog_options :* Options to be sent as additional arguments to iverilog
* *depend           :* List of cores that only Icarus simulation depends on

verilator (optional)
~~~~~~~~~~~~~~~~~~~~
Additional options used when simulating with Verilator:

* *source_type (optional)       :* Currently can be set to C or SystemC (default is C)
* *define_files (optional)      :* List of .v files containing `define directives to be
converted to #define directives in corresponding .h files
* *libs (optional)              :* List of external libraries linked with the generated model
* *verilator_options (optional) :* List of options passed to Verilator
* *src_files (optional)         :* List of C or SystemC files
* *include_files (optional)     :* List of C or SystemC include files
* *tb_toplevel (optional)       :* Name of the test bench top file
* *depend (optional)            :* List of cores that only Verilator simulation depends on

verilog
~~~~~~~
The verilog section contains options for verilog source code:

* *src_files (optional) :*
List of verilog files containing modules that are a part of the synthesized design.

* *include_files (optional) :*
List of verilog files that are used in `include statements of the src_files.

* *tb_src_files (optional) :*
List of verilog files containing modules that are only used in test benches and not part of the synthesized design.

* *tb_include_files (optional) :*
List of verilog files that are referenced with `include statements from tb_src_files.

vpi (optional)
~~~~~~~~~~~~~~
The VPI section contains information on how to compile C source files into a VPI library:

* *name :*
Name of the compiled VPI library.

* *src_files :*
List of C source files for the VPI library.

* *include_files (optional) :*
List of C include files for the VPI library.

* *libs (optional) :*
List of external libraries linked with the VPI library.

scripts (optional)
~~~~~~~~~~~~~~~~~~
External scripts that are executed during the simulation process.

pre_run_scripts (optional)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A white-space separated list of scripts that are executed before the simulation.

post_run_scripts (optional)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A white-space separated list of scripts that are executed after the simulation is started.

provider (optional)
~~~~~~~~~~~~~~~~~~~
The provider section gives information on where to find the source code for the core. If the provider section is missing, the core is assumed to be local, with the directory of the .core file as the root directory.

* *name :*
The name option selects which provider backend to use. All other provider options are specific to the selected provider. Currently three backends are supported.

name  = opencores
^^^^^^^^^^^^^^^^^
* *repo_name :* Name of the opencores project. Can be found under Details on the project homepage.

* *repo_root :* The sub directory in the repo that contains the files of interest. In most cases the value "trunk" is used to avoid pulling in tags and branches.

* *revision :* The svn revision of the repository.

name = github
^^^^^^^^^^^^^
* *user :* Name of the github user or organisation.

* *repo :* Name of the GIT repository.

* *branch :* Name of the GIT branch to use.

name = url
^^^^^^^^^^
* *url :* URL of the core file (or archive).

* *filetype :* File type (zip, tar, simple).

* *corename :* Name of the directory where the archive is unpacked (or the simple file is copied). If not provided, the name of the cache/build directory is the same as the core.

plusargs (optional)
~~~~~~~~~~~~~~~~~~~

Plusargs are additional options that are sent to the verilog simulator at runtime. Cores that use plusargs internally (with $test$plusargs or $value$plusargs) can expose them to FuseSoc by adding an entry in the plusargs section.

The format of a plusarg is
<option_name> = <type> <Description>

When a system is simulated in FuseSoC, the options specified after the system name are interpreted as plusargs and are compared to the plusargs registered in the system cores. To set a plusargs value, the following command-line syntax is used:

For boolean parameters:

+fusesoc sim <system_name> --<option_name>+

For other types of parameters:

+fusesoc sim <system_name> --<option_name>=<value>+

The <type> field has the following meaning:

* *bool :* Boolean value. Set to true if the option is specified, otherwise false.
* *int :* Integer value. If the value is not an integer, FuseSoC exits with errors.
* *str :* A string value.
* *file :* The value string is interpreted as a relative path from the current working directory and is converted by FuseSoC into an absolute path.

.Defining plusargs
--------
timeout = int Abort simulation after the specified tim
jtag-vpi-enable = bool Enable the JTAG VPI debug system
testcase = file VMEM file containg a or1k testcase
--------

.Using plusargs
--------
fusesoc sim ordb2a --timeout=100000 --testcase=tests/or1200-basic.vmem --vcd
--------

Known issues
------------

. The configparser in python 2 doesn't handle spaces before values in multiline options.
+
.Illegal comment style
--------------
src_files =
 clkgen.v
 #gpio.v
 fusesoc_top.v
--------------
+
This is not legal in python 2, while:
+
.Legal comment style
--------------
src_files =
 clkgen.v
# gpio.v
 fusesoc_top.v
--------------
+
is ok in python 2 and python 3.
+
. Spaces are not allowed anywhere in the paths.

. A specific git commit cannot be selected for the github backend.
